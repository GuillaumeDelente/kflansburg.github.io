<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kflansburg.com</title>
    <link>http://kflansburg.com/</link>
    <description>Recent content on kflansburg.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Kevin Flansburg</copyright>
    <lastBuildDate>Thu, 26 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://kflansburg.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust Continuous Delivery</title>
      <link>http://kflansburg.com/posts/rust-continuous-delivery/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://kflansburg.com/posts/rust-continuous-delivery/</guid>
      <description>&lt;p&gt;Over the last few years I have iterated several times on continuous delivery
pipelines for Rust applications. In this post I will describe several of these
iterations, lessons learned, and share my most recent solution in detail.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Fistful of States: More State Machine Patterns in Rust</title>
      <link>http://kflansburg.com/posts/a-fistful-of-states/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>http://kflansburg.com/posts/a-fistful-of-states/</guid>
      <description>My recent guest post on Deis Labs&#39; Blog offers a deep dive into my work on Krustlet, including the design and implementation of a flexible state machine API for specifying custom Kubelet behavior in a type-safe framework.</description>
    </item>
    
  </channel>
</rss>
